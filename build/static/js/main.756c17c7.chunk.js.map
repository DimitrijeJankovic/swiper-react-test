{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","toggleMenu","_this2","this","image","img1","backgroundImage","img2","img3","img4","react_default","a","createElement","className","href","src","alt","onClick","setState","class","hraf","lib_default","slidesPerView","spaceBetween","centeredSlides","loop","autoplay","delay","disableOnInteraction","pagination","el","clickable","navigation","nextEl","prevEl","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.756c17c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Swiper from 'react-id-swiper';\nimport './App.css'\n\nclass App extends Component {\n\n  state = {\n    toggleMenu: false,\n  }\n\n  render() {\n\n    const params = {\n      slidesPerView: 1,\n      spaceBetween: 0,\n      centeredSlides: true,\n      loop: true,\n      autoplay: {\n        delay: 4000,\n        disableOnInteraction: false\n      },\n      pagination: {\n        el: '.swiper-pagination',\n        clickable: true,\n      },\n      navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev'\n      }\n    }\n\n    const image = {\n      img1: {\n        backgroundImage: 'url(\"images/img1.jpg\")'\n      },\n      img2: {\n        backgroundImage: 'url(\"images/img2.jpg\")'\n      },\n      img3: {\n        backgroundImage: 'url(\"images/img3.jpg\")'\n      },\n      img4: {\n        backgroundImage: 'url(\"images/img4.jpg\")'\n      }\n    }\n\n    return(\n      <div>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"nav-bar\">\n              <div className=\"nav-info col-lg-4\">\n                <ul>\n                  <li>\n                    <a href=\"#\"><span>Call:</span> +381601479990</a>\n                  </li>\n                  <li>\n                    <a href=\"#\"><span>Write:</span> info@dsphotography.com</a>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"nav-logo col-lg-4\">\n                <img src=\"images/logo.png\" alt=\"logo\" />\n              </div>\n              <div className=\"nav-menu-links col-lg-4\">\n                <div className=\"nav-search-icon\">\n                  <i className=\"fas fa-search\"></i>\n                </div>\n                <div className=\"nav-menu-btn\" onClick = { () => this.setState({ toggleMenu: !this.state.toggleMenu }) }>\n                  <i class=\"fas fa-bars\"></i>\n                </div>\n                <nav className={this.state.toggleMenu ? \"menu-links menu-links-mob\" : \"menu-links\"}>\n                  <ul>\n                    <li><a hraf=\"#\" className=\"activ-link\">Home</a></li>\n                    <li><a hraf=\"#\">Weddings</a></li>\n                    <li><a hraf=\"#\">About</a></li>\n                    <li><a hraf=\"#\">Contact</a></li>\n                  </ul>\n                </nav>\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"main\">\n              <Swiper {...params}>\n                <div className=\"swiper-main-conatiner\">\n                  <div className=\"overlay\"></div>\n                  <div className=\"bg\" style={image.img1}></div>\n                  <div className=\"swiper-content\">\n                    <h3>Some text</h3>\n                    <p>ovde ide nesto najslepse sto se ikada culi u zivotu</p>\n                  </div>\n                </div>\n                <div className=\"swiper-main-conatiner\">\n                  <div className=\"overlay\"></div>\n                  <div className=\"bg\" style={image.img2}></div>\n                  <div className=\"swiper-content\">\n                    <h3>Some text</h3>\n                    <p>ovde ide nesto najslepse sto se ikada culi u zivotu</p>\n                  </div>\n                </div>\n                <div className=\"swiper-main-conatiner\">\n                  <div className=\"overlay\"></div>\n                  <div className=\"bg\" style={image.img3}></div>\n                  <div className=\"swiper-content\">\n                    <h3>Some text</h3>\n                    <p>ovde ide nesto najslepse sto se ikada culi u zivotu</p>\n                  </div>\n                </div>\n                <div className=\"swiper-main-conatiner\">\n                  <div className=\"overlay\"></div>\n                  <div className=\"bg\" style={image.img4}></div>\n                  <div className=\"swiper-content\">\n                    <h3>Some text</h3>\n                    <p>ovde ide nesto najslepse sto se ikada culi u zivotu</p>\n                  </div>\n                </div>\n            </Swiper>\n            </div>\n          </div>\n          <div className=\"row\">\n            <footer className=\"footer\">\n              <div className=\"policy col-lg-4\">\n                <span>Â© DSPhotography 2019  /  All rights reserved. </span>\n              </div>\n              <div className=\"swiper-pagination col-lg-4\">\n              </div>\n              <div className=\"social-media col-lg-4\">\n                <ul>\n                  <li><a href=\"#\"><span>Facebook</span></a></li>\n                  <li><a href=\"#\"><span>Instagram</span></a></li>\n                </ul>\n              </div>\n            </footer>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}